"""
Prompt Builder Intelligent - Construit prompts avec anti-r√©p√©tition
"""

import logging
from typing import Dict, List

logger = logging.getLogger(__name__)


class PromptBuilder:
    """Construit des prompts enrichis avec anti-r√©p√©tition"""
    
    def extract_questions_asked(self, history: List[Dict], bot_name: str = "Camille") -> List[str]:
        """
        Extrait les questions d√©j√† pos√©es par le bot
        
        Args:
            history: Historique complet de la conversation
            bot_name: Nom du bot
            
        Returns:
            Liste des questions pos√©es par le bot
        """
        questions = []
        
        for msg in history:
            if msg.get('profiles', {}).get('is_bot'):
                content = msg['content']
                # D√©tecter les questions (contient '?')
                if '?' in content:
                    # Extraire chaque question
                    parts = content.split('?')
                    for part in parts[:-1]:  # Exclure la derni√®re partie (apr√®s dernier ?)
                        question = part.strip().split('.')[-1].strip()  # Prendre apr√®s dernier point
                        if question:
                            questions.append(question + '?')
        
        return questions
    
    def extract_topics_discussed(self, history: List[Dict]) -> List[str]:
        """
        Extrait les sujets d√©j√† discut√©s
        
        Args:
            history: Historique complet
            
        Returns:
            Liste des sujets principaux
        """
        topics = []
        keywords = {
            'nature': ['nature', 'for√™t', 'montagne', 'ville', 'campagne'],
            'randonn√©e': ['rando', 'randonn√©e', 'trek', 'trail', 'gr20'],
            'sport': ['sport', 'escalade', 'v√©lo', 'course'],
            'travail': ['travail', 'boulot', 'job', 'm√©tier'],
            'loisirs': ['loisirs', 'hobbies', 'passion', 'temps libre'],
            'weekend': ['weekend', 'week-end', 'samedi', 'dimanche']
        }
        
        conversation_text = ' '.join([msg['content'].lower() for msg in history])
        
        for topic, words in keywords.items():
            if any(word in conversation_text for word in words):
                topics.append(topic)
        
        return list(set(topics))
    
    def extract_user_responses(self, history: List[Dict]) -> Dict[str, List[str]]:
        """
        Extrait les r√©ponses de l'utilisateur pour chaque sujet
        
        Args:
            history: Historique complet
            
        Returns:
            Dict {topic: [responses]}
        """
        responses = {
            'nature_preference': [],
            'sports': [],
            'location': [],
            'work': []
        }
        
        # D√©tecter nature vs ville
        for msg in history:
            if not msg.get('profiles', {}).get('is_bot'):
                content = msg['content'].lower()
                
                if 'nature' in content or 'for√™t' in content or 'montagne' in content:
                    responses['nature_preference'].append('nature')
                elif 'ville' in content:
                    responses['nature_preference'].append('ville')
                
                # Sports mentionn√©s
                if 'rando' in content or 'randonn√©e' in content:
                    responses['sports'].append('randonn√©e')
                if 'escalade' in content:
                    responses['sports'].append('escalade')
                
                # Localisation si mentionn√©e
                # (√† impl√©menter si n√©cessaire)
        
        return {k: list(set(v)) for k, v in responses.items()}
    
    def build_anti_repetition_context(self, history: List[Dict]) -> str:
        """
        Construit un contexte anti-r√©p√©tition explicite
        
        Args:
            history: Historique complet
            
        Returns:
            Texte contexte anti-r√©p√©tition
        """
        questions_asked = self.extract_questions_asked(history)
        topics_discussed = self.extract_topics_discussed(history)
        user_responses = self.extract_user_responses(history)
        
        context = "\n‚ö†Ô∏è R√àGLES ANTI-R√âP√âTITION CRITIQUES:\n\n"
        
        if questions_asked:
            context += "QUESTIONS D√âJ√Ä POS√âES (NE JAMAIS REPOSER) :\n"
            for q in questions_asked[-10:]:  # 10 derni√®res questions
                context += f"  - {q}\n"
            context += "\n"
        
        if topics_discussed:
            context += f"SUJETS D√âJ√Ä DISCUT√âS: {', '.join(topics_discussed)}\n"
            context += "‚Üí Ne pas redemander ce qui a d√©j√† √©t√© abord√©\n\n"
        
        if user_responses['nature_preference']:
            pref = user_responses['nature_preference'][0]
            context += f"USER A DIT PR√âF√âRER: {pref.upper()}\n"
            context += f"‚Üí Ne JAMAIS redemander nature vs ville\n\n"
        
        if user_responses['sports']:
            sports = ', '.join(user_responses['sports'])
            context += f"SPORTS PRATIQU√âS: {sports}\n"
            context += "‚Üí Ne pas redemander quels sports\n\n"
        
        context += """
üìã INSTRUCTIONS POUR √âVITER R√âP√âTITIONS:

1. LIS L'HISTORIQUE COMPLET avant de r√©pondre
2. Si une question a d√©j√† √©t√© pos√©e, JAMAIS la reposer
3. Si user a d√©j√† r√©pondu √† quelque chose, s'en SOUVENIR
4. Rebondir sur ce qui a √©t√© dit plut√¥t que redemander
5. Varier les expressions (pas toujours "Ah...", "Et toi ?")

‚úÖ BON : "Tu m'avais dit que tu aimais la nature, tu vas souvent en for√™t ?"
‚ùå MAUVAIS : "Nature ou ville ?" (d√©j√† demand√© 5 fois)

‚úÖ BON : "Cool ! Tu fais d'autres sports ?"
‚ùå MAUVAIS : "Et toi ?" (r√©p√©titif)
"""
        
        return context
    
    def build_full_prompt(
        self,
        bot_profile: Dict,
        memory: Dict,
        history: List[Dict],
        current_message: str,
        analysis: Dict,
        clarification_context: Dict = None  # üÜï NOUVEAU
    ) -> str:
        """
        Construit le prompt complet avec TOUT l'historique et anti-r√©p√©tition
        
        Args:
            bot_profile: Profil du bot
            memory: M√©moire long-terme
            history: Historique COMPLET (200 messages)
            current_message: Message actuel
            analysis: Analyse du message
            clarification_context: Contexte de clarification (si USER_CONFUSED)
            
        Returns:
            Prompt complet
        """
        system_prompt = bot_profile.get('system_prompt', '')
        
        # 1. M√©moire long-terme
        memory_context = f"""
M√âMOIRE DE CETTE PERSONNE:
- Nom: {memory.get('user_name', 'inconnu')}
- Niveau relation: {memory.get('relationship_level', 'stranger')}
- Trust score: {memory.get('trust_score', 0)}/100
- Ton conversation: {memory.get('conversation_tone', 'neutral')}
- Topics pr√©f√©r√©s: {', '.join(memory.get('preferred_topics', [])) or 'aucun'}
- Topics √† √©viter: {', '.join(memory.get('topics_to_avoid', [])) or 'aucun'}
"""
        
        # 2. Anti-r√©p√©tition (CRITIQUE)
        anti_repetition = self.build_anti_repetition_context(history)
        
        # 3. Historique COMPLET (tous les messages charg√©s)
        logger.info(f"   üìö Historique dans prompt: {len(history)} messages")
        
        # CLARIFIER qui est qui dans l'historique
        bot_name = bot_profile.get('first_name', 'Camille')
        
        history_context = f"""HISTORIQUE COMPLET DE LA CONVERSATION:
(Tu es {bot_name}. Les messages marqu√©s "TOI:" sont TES messages pass√©s)

"""
        
        for msg in history:
            sender_name = msg.get('profiles', {}).get('first_name', 'Inconnu')
            is_bot = msg.get('profiles', {}).get('is_bot', False)
            content = msg['content']
            
            if is_bot:
                # C'est le bot qui a parl√©
                history_context += f"TOI ({bot_name}): {content}\n"
            else:
                # C'est l'user qui a parl√©
                history_context += f"{sender_name}: {content}\n"
        
        history_context += "\n"
        
        # 4. Analyse contextuelle
        analysis_context = f"""
ANALYSE DU MESSAGE ACTUEL:
- Urgence: {analysis['urgency']}/5
- Complexit√©: {analysis['complexity']}/5
- Ton √©motionnel: {analysis['emotional_tone']}
- Multi-messages: {analysis.get('requires_multi_messages', False)}
"""
        
        # 5. üÜï Contexte de clarification (si USER_CONFUSED)
        clarification_instructions = ""
        
        if clarification_context:
            clarification_instructions = f"""

üö® SITUATION SP√âCIALE - USER CONFUS:

L'utilisateur a envoy√© plusieurs messages car il n'a PAS COMPRIS ta question pr√©c√©dente.

TA QUESTION PR√âC√âDENTE:
"{clarification_context.get('last_bot_message', 'N/A')}"

SES R√âPONSES CONFUSES:
"""
            for msg in clarification_context.get('confused_messages', []):
                clarification_instructions += f"- \"{msg}\"\n"
            
            clarification_instructions += """

üéØ TON OBJECTIF:
1. CLARIFIER ta question pr√©c√©dente avec empathie
2. REFORMULER de mani√®re plus claire
3. NE PAS t'excuser excessivement (reste naturel)
4. Exemple: "Ah pardon, je me suis mal exprim√© ! Je voulais dire..."
5. Exemple: "Haha d√©sol√©, je voulais savoir..."

‚ö†Ô∏è TON: L√©ger, pas trop formel, un peu d'auto-d√©rision OK
"""
        
        # 6. Instructions adaptatives
        instructions = "\nINSTRUCTIONS:\n"
        
        # üÜï CONTEXTE CRITIQUE : Comprendre la situation actuelle
        instructions += "\nüö® CONTEXTE ACTUEL CRITIQUE:\n"
        
        # Identifier le dernier message du bot
        bot_messages = [msg for msg in history if msg.get('profiles', {}).get('is_bot')]
        if bot_messages:
            last_bot_msg = bot_messages[-1]['content']
            instructions += f"- TON DERNIER MESSAGE √©tait: \"{last_bot_msg}\"\n"
            instructions += "- L'user R√âPOND maintenant √† ce message\n"
            instructions += "- NE PAS r√©p√©ter ce que tu viens de dire\n"
            
            # Cas sp√©cifique : Bot a initi√© avec "Salut"
            if 'salut' in last_bot_msg.lower() or 'hello' in last_bot_msg.lower() or 'hey' in last_bot_msg.lower():
                instructions += "- Tu as D√âJ√Ä dit bonjour/salut\n"
                instructions += "- NE PAS redire 'Salut' maintenant\n"
                instructions += "- Si user demande 'Et toi ?', R√âPONDS √Ä LA QUESTION\n"
                instructions += "- Exemple BON: '√áa va bien ! Et toi ?' ou 'Bien, merci'\n"
                instructions += "- Exemple MAUVAIS: 'Salut ! Et toi ?' (tu as d√©j√† dit salut!)\n\n"
        else:
            instructions += "- C'est possiblement le d√©but de la conversation\n\n"
        
        instructions += "\n"
        # Multi-messages : D√âSACTIV√â TEMPORAIREMENT
        instructions += "\n‚ö†Ô∏è R√àGLE CRITIQUE - FORMAT R√âPONSE:\n"
        instructions += "- TOUJOURS UN SEUL MESSAGE COMPLET\n"
        instructions += "- NE PAS utiliser ||| (d√©sactiv√©)\n"
        instructions += "- NE JAMAIS r√©p√©ter ce que tu viens de dire\n"
        instructions += "- NE JAMAIS poser 2x la m√™me question\n\n"
        
        # CRITIQUE: Adaptation selon phase conversation
        message_count = len(history)
        instructions += "\nüö® R√àGLE ULTRA-CRITIQUE - ADAPTATION STYLE:\n"
        
        if message_count == 0:
            instructions += "- PREMIER MESSAGE: Tu peux commencer par 'Salut [Pr√©nom] !'\n"
            instructions += "- C'est normal de se pr√©senter au d√©but\n"
        elif message_count < 5:
            instructions += "- D√âBUT DE CONVERSATION (2-5 messages):\n"
            instructions += "- NE PAS recommencer par 'Salut [Pr√©nom]'\n"
            instructions += "- Tu as d√©j√† dit bonjour, continue naturellement\n"
            instructions += "- Commence directement par ta r√©ponse\n"
        else:
            instructions += "- CONVERSATION EN COURS (5+ messages):\n"
            instructions += "- NE JAMAIS JAMAIS commencer par 'Salut [Pr√©nom]'\n"
            instructions += "- Vous vous parlez d√©j√† depuis un moment\n"
            instructions += "- Commence DIRECTEMENT par ta r√©ponse\n"
            instructions += "- Exemple BON: 'Ah cool !', 'Vraiment ?', 'J'adore'\n"
            instructions += "- Exemple MAUVAIS: 'Salut Albert', 'Hello', 'Hey'\n"
        
        instructions += "\n"
        
        if analysis['urgency'] >= 4:
            instructions += "- R√©ponds rapidement, c'est urgent\n"
        
        if memory.get('trust_score', 0) >= 70:
            instructions += "- Relation √©tablie, sois authentique et direct\n"
        else:
            instructions += "- Relation naissante, reste naturel mais l√©ger\n"
        
        instructions += "\nüí° VARI√âT√â EXPRESSIONS:\n"
        instructions += "- √âvite 'Ah...' syst√©matique\n"
        instructions += "- Varie les r√©actions: 'Cool !', 'Vraiment ?', 'Sympa !', 'J'adore !'\n"
        instructions += "- Pas toujours 'Et toi ?' en fin de message\n"
        instructions += "\n‚ö†Ô∏è ANTI-DOUBLON ABSOLU:\n"
        instructions += "- RELIS l'historique COMPLET ci-dessus\n"
        instructions += "- IDENTIFIE ce que TU (TOI:) as d√©j√† dit\n"
        instructions += "- NE JAMAIS r√©p√©ter tes propres messages\n"
        instructions += "- Si tu as d√©j√† pos√© une question, JAMAIS la reposer\n"
        instructions += "- Varie compl√®tement tes questions\n"
        instructions += "- Exemple: Si tu as demand√© 'nature ou ville?', ne JAMAIS redemander\n"
        instructions += "\nüéØ R√àGLE D'OR:\n"
        instructions += "- Si user r√©pond √† TA question, reconnais-le et continue naturellement\n"
        instructions += "- Si user te pose une question, R√âPONDS-Y directement\n"
        instructions += "- Exemple: User dit 'Et toi ?' ‚Üí R√©ponds '√áa va bien !' ou similaire\n"
        instructions += "- NE PAS renvoyer la question si c'est toi qui l'as pos√©e en premier\n"
        
        # Assembler
        full_prompt = f"""
{system_prompt}

{memory_context}

{anti_repetition}

{history_context}

{analysis_context}

{clarification_instructions}

{instructions}

MESSAGE ACTUEL:
{current_message}

TA R√âPONSE:
"""
        
        return full_prompt


# Instance globale
prompt_builder = PromptBuilder()
