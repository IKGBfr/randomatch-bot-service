"""
Relance Builder - G√©n√®re des messages de relance naturels apr√®s abandon

D√©tecte conversations o√π user a envoy√© message sans r√©ponse depuis 2-4h
et g√©n√®re une relance authentique avec excuse + question d'accroche.
"""

import logging
import random
from datetime import datetime
from typing import Dict, Optional

logger = logging.getLogger(__name__)


class RelanceBuilder:
    """G√©n√®re des messages de relance naturels"""
    
    def __init__(self):
        # Templates d'excuses VAGUES (jamais d'activit√© dat√©e pr√©cise)
        self.EXCUSES = [
            "D√©sol√© j'√©tais occup√©e",
            "Sorry j'ai √©t√© d√©bord√©e",
            "Excuse-moi j'ai oubli√© de r√©pondre",
            "D√©sol√©e je viens juste de voir ton message",
            "Sorry j'ai pas eu le temps de r√©pondre",
            "Excuse-moi j'ai compl√®tement zapp√©",
            "D√©sol√©e j'ai √©t√© pas mal prise",
            "Sorry j'ai pas fait gaffe √† mon tel",
            "Excuse-moi j'√©tais un peu dans ma bulle",
            "D√©sol√©e j'ai mis du temps √† r√©pondre",
            "Sorry je r√©ponds tard",
            "Excuse-moi pour le d√©lai"
        ]
        
        # Questions d'accroche par th√®me
        self.FOLLOW_UPS = {
            'hiking': [
                "Alors, c'est quand ta prochaine rando ?",
                "Tu as des sorties de pr√©vues ce weekend ?",
                "Tu connais des spots sympas dans le coin ?",
                "Tu fais quoi comme type de randos d'habitude ?",
                "T'es plut√¥t montagne ou for√™t ?"
            ],
            'general': [
                "Comment √ßa va sinon ?",
                "Quoi de neuf de ton c√¥t√© ?",
                "Tu fais quoi de beau en ce moment ?",
                "Comment s'est pass√©e ta semaine ?",
                "Des projets sympa ?"
            ],
            'weekend': [
                "Tu fais quoi ce weekend ?",
                "Des plans pour le weekend ?",
                "Tu as pr√©vu des trucs sympas ?",
                "Tu sors ce weekend ou pas trop ?",
                "Weekend tranquille ou actif ?"
            ],
            'interests': [
                "Tu pratiques d'autres sports √† c√¥t√© de la rando ?",
                "T'as d'autres passions outdoor ?",
                "Tu fais quoi quand tu randos pas ?",
                "T'es plut√¥t sportive ou relax ?",
                "C'est quoi tes autres hobbies ?"
            ]
        }
    
    def build_relance_message(
        self,
        bot_profile: Dict,
        user_profile: Dict,
        hours_since_last_message: float
    ) -> str:
        """
        G√©n√®re un message de relance naturel adapt√© au contexte.
        
        Args:
            bot_profile: Profil du bot
            user_profile: Profil de l'utilisateur
            hours_since_last_message: Heures √©coul√©es depuis dernier message user
            
        Returns:
            str: Message de relance complet
        """
        try:
            # Choisir excuse vague et g√©n√©rique
            excuse = random.choice(self.EXCUSES)
            
            # Choisir question d'accroche
            follow_up_theme = self._choose_follow_up_theme(user_profile)
            follow_up = random.choice(self.FOLLOW_UPS[follow_up_theme])
            
            # Assembler avec emoji naturel
            emojis = ['üòÖ', 'üòä', 'üôÉ']
            emoji = random.choice(emojis)
            
            # Format : Excuse + emoji + question
            message = f"{excuse} {emoji} {follow_up}"
            
            logger.info(f"‚úÖ Relance g√©n√©r√©e: {message}")
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå Erreur build_relance_message: {e}")
            # Fallback simple et vague
            return "Hey ! D√©sol√© pour le d√©lai üòÖ Comment √ßa va ?"

    
    def _choose_follow_up_theme(self, user_profile: Dict) -> str:
        """
        Choisit le th√®me de la question d'accroche selon profil user.
        
        Args:
            user_profile: Profil utilisateur avec hiking_level, interests, etc.
            
        Returns:
            str: Th√®me ('hiking', 'general', 'weekend', 'interests')
        """
        # Si user a niveau rando avanc√© ‚Üí question hiking
        hiking_level = user_profile.get('hiking_level', '').lower()
        if hiking_level in ['advanced', 'expert']:
            return 'hiking' if random.random() < 0.7 else 'interests'
        
        # Si proche du weekend (jeudi/vendredi)
        day = datetime.now().weekday()
        if day in [3, 4]:  # Jeudi, vendredi
            return 'weekend' if random.random() < 0.6 else 'hiking'
        
        # Si user a beaucoup d'int√©r√™ts list√©s
        interests = user_profile.get('interests', [])
        if len(interests) >= 3:
            return 'interests' if random.random() < 0.5 else 'hiking'
        
        # D√©faut : question rando (on est sur RandoMatch!)
        weights = {
            'hiking': 0.5,
            'general': 0.2,
            'weekend': 0.2,
            'interests': 0.1
        }
        
        return random.choices(
            list(weights.keys()),
            weights=list(weights.values())
        )[0]
    
    def should_send_relance(
        self,
        hours_since_last: float,
        last_relance_hours_ago: Optional[float]
    ) -> bool:
        """
        D√©termine si une relance doit √™tre envoy√©e.
        
        Args:
            hours_since_last: Heures depuis dernier message user
            last_relance_hours_ago: Heures depuis derni√®re relance (None si jamais)
            
        Returns:
            bool: True si relance n√©cessaire
        """
        # D√©lai minimum : 2h apr√®s message user
        if hours_since_last < 2:
            return False
        
        # D√©lai maximum : 48h (apr√®s = conversation vraiment morte)
        if hours_since_last > 48:
            return False
        
        # Si d√©j√† relanc√© r√©cemment : attendre 24h minimum
        if last_relance_hours_ago is not None and last_relance_hours_ago < 24:
            logger.info(f"Derni√®re relance il y a {last_relance_hours_ago:.1f}h, trop r√©cent")
            return False
        
        # Probabilit√© croissante avec le temps
        if 2 <= hours_since_last < 4:
            # 2-4h : 30% chance
            return random.random() < 0.3
        elif 4 <= hours_since_last < 8:
            # 4-8h : 60% chance
            return random.random() < 0.6
        elif 8 <= hours_since_last < 24:
            # 8-24h : 80% chance
            return random.random() < 0.8
        else:
            # >24h : 100% chance
            return True
