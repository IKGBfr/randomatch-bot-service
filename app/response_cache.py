"""
Response Cache - √âvite g√©n√©ration de r√©ponses identiques/similaires

Utilise Redis pour stocker:
1. Intent de r√©ponse (flag "generating")
2. R√©ponses r√©centes (pour deduplication)
3. TTL 60s (expire automatiquement)
"""

import json
import hashlib
from datetime import datetime
from typing import Optional, List, Dict
import redis.asyncio as redis
from difflib import SequenceMatcher
import logging

logger = logging.getLogger(__name__)


class ResponseCache:
    """Cache Redis pour √©viter doublons de r√©ponses"""
    
    def __init__(self, redis_client: redis.Redis):
        self.redis = redis_client
        self.CACHE_TTL = 60  # Secondes - expire auto
        self.SIMILARITY_THRESHOLD = 0.8  # 80% similarit√© = doublon
    
    def _make_key(self, match_id: str, key_type: str) -> str:
        """G√©n√®re cl√© Redis"""
        return f"response:{key_type}:{match_id}"
    
    def _calculate_similarity(self, text1: str, text2: str) -> float:
        """Calcule similarit√© entre 2 textes (0.0 √† 1.0)"""
        return SequenceMatcher(None, text1.lower(), text2.lower()).ratio()
    
    async def is_generating(self, match_id: str) -> bool:
        """Check si une g√©n√©ration est d√©j√† en cours"""
        key = self._make_key(match_id, "generating")
        exists = await self.redis.exists(key)
        
        if exists:
            data = await self.redis.get(key)
            if data:
                generating_data = json.loads(data)
                logger.info(f"‚ö†Ô∏è G√©n√©ration d√©j√† en cours depuis {generating_data.get('started_at')}")
                return True
        
        return False
    
    async def mark_generating(self, match_id: str, user_message: str):
        """Marque qu'une g√©n√©ration d√©marre"""
        key = self._make_key(match_id, "generating")
        
        data = {
            'started_at': datetime.now().isoformat(),
            'user_message': user_message,
            'status': 'generating'
        }
        
        await self.redis.setex(
            key,
            self.CACHE_TTL,
            json.dumps(data)
        )
        
        logger.info(f"üîí G√©n√©ration marqu√©e en cours (TTL {self.CACHE_TTL}s)")
    
    async def clear_generating(self, match_id: str):
        """Clear le flag de g√©n√©ration"""
        key = self._make_key(match_id, "generating")
        await self.redis.delete(key)
        logger.info("üîì Flag g√©n√©ration cleared")
    
    async def store_response(self, match_id: str, bot_response: str, user_message: str):
        """Stocke une r√©ponse dans le cache"""
        key = self._make_key(match_id, "recent")
        
        # R√©cup√©rer r√©ponses existantes
        existing = await self.redis.get(key)
        
        if existing:
            responses = json.loads(existing)
        else:
            responses = []
        
        # Ajouter nouvelle r√©ponse
        responses.append({
            'response': bot_response,
            'user_message': user_message,
            'timestamp': datetime.now().isoformat()
        })
        
        # Garder seulement les 5 derni√®res
        responses = responses[-5:]
        
        # Stocker avec TTL
        await self.redis.setex(
            key,
            self.CACHE_TTL,
            json.dumps(responses)
        )
        
        logger.info(f"üíæ R√©ponse stock√©e en cache (total: {len(responses)})")
    
    async def find_similar_response(
        self, 
        match_id: str, 
        user_message: str
    ) -> Optional[str]:
        """
        Cherche une r√©ponse similaire r√©cente
        
        Returns:
            str si doublon trouv√©, None sinon
        """
        key = self._make_key(match_id, "recent")
        existing = await self.redis.get(key)
        
        if not existing:
            return None
        
        responses = json.loads(existing)
        
        # Check chaque r√©ponse r√©cente
        for resp_data in responses:
            # Comparer user_message pour voir si m√™me contexte
            user_similarity = self._calculate_similarity(
                user_message,
                resp_data['user_message']
            )
            
            if user_similarity > 0.7:  # M√™me question
                logger.warning(f"‚ö†Ô∏è Question similaire trouv√©e!")
                logger.warning(f"   User msg: {user_message[:50]}")
                logger.warning(f"   Cached: {resp_data['user_message'][:50]}")
                logger.warning(f"   Similarity: {user_similarity:.2%}")
                logger.warning(f"   ‚Üí R√©ponse d√©j√† envoy√©e: {resp_data['response'][:50]}")
                
                return resp_data['response']
        
        return None
    
    async def is_duplicate_response(
        self,
        match_id: str,
        new_response: str
    ) -> bool:
        """
        Check si la r√©ponse g√©n√©r√©e est trop similaire aux r√©centes
        
        Returns:
            True si doublon, False sinon
        """
        key = self._make_key(match_id, "recent")
        existing = await self.redis.get(key)
        
        if not existing:
            return False
        
        responses = json.loads(existing)
        
        # Comparer avec chaque r√©ponse r√©cente
        for resp_data in responses:
            similarity = self._calculate_similarity(
                new_response,
                resp_data['response']
            )
            
            if similarity >= self.SIMILARITY_THRESHOLD:
                logger.warning(f"‚ùå DOUBLON D√âTECT√â!")
                logger.warning(f"   Nouvelle: {new_response[:50]}")
                logger.warning(f"   Existante: {resp_data['response'][:50]}")
                logger.warning(f"   Similarit√©: {similarity:.2%}")
                logger.warning(f"   ‚Üí SKIP cette r√©ponse")
                
                return True
        
        return False
    
    async def get_recent_responses(self, match_id: str) -> List[Dict]:
        """R√©cup√®re toutes les r√©ponses r√©centes (debug)"""
        key = self._make_key(match_id, "recent")
        existing = await self.redis.get(key)
        
        if existing:
            return json.loads(existing)
        
        return []
