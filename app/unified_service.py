"""
Service unifi√© lan√ßant Bridge + Worker en parall√®le.
√Ä utiliser comme entry point unique Railway.
"""
import asyncio
import logging

# Import des deux services
from app.bridge_intelligence import main as bridge_main
from app.main_worker import main as worker_main

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def unified_service():
    """Lance Bridge + Worker en parall√®le avec asyncio.gather"""
    
    logger.info("="  * 70)
    logger.info("üöÄ SERVICE UNIFI√â - BRIDGE + WORKER")
    logger.info("=" * 70)
    
    try:
        # Lancer les deux services en parall√®le
        await asyncio.gather(
            bridge_main(),  # √âcoute PostgreSQL NOTIFY
            worker_main(),  # Traite messages Redis
        )
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è Interruption utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}", exc_info=True)
    finally:
        logger.info("üõë Arr√™t du service unifi√©")


if __name__ == "__main__":
    asyncio.run(unified_service())
