#!/usr/bin/env python3
"""
üîç V√©rification Compl√®te Pr√©-D√©ploiement
V√©rifie que tout est pr√™t pour d√©ployer sur Railway
"""

import os
import sys
import subprocess
from pathlib import Path


def print_header(title):
    """Affiche un header format√©"""
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70)


def print_section(title):
    """Affiche une section"""
    print(f"\nüìã {title}")
    print("-" * 70)


def check_python_version():
    """V√©rifie la version Python"""
    print_section("V√©rification Python")
    
    version = sys.version_info
    if version.major == 3 and version.minor >= 11:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} (OK)")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro}")
        print(f"   Requis: Python 3.11+")
        return False


def check_files():
    """V√©rifie les fichiers critiques"""
    print_section("V√©rification Fichiers Critiques")
    
    files = {
        'Procfile': True,
        'requirements.txt': True,
        '.gitignore': True,
        '.env': True,
        'app/__init__.py': True,
        'app/config.py': True,
        'app/bridge_intelligence.py': True,
        'app/worker_intelligence.py': True,
        'app/redis_context.py': True,
        'app/analysis.py': True,
        'app/pre_processing.py': True,
        'app/utils/timing.py': True,
    }
    
    all_ok = True
    for filepath, required in files.items():
        exists = Path(filepath).exists()
        if exists:
            print(f"‚úÖ {filepath}")
        else:
            status = "‚ùå" if required else "‚ö†Ô∏è "
            print(f"{status} {filepath} - {'MANQUANT' if required else 'Optionnel'}")
            if required:
                all_ok = False
    
    return all_ok


def check_env_vars():
    """V√©rifie les variables d'environnement"""
    print_section("V√©rification Variables d'Environnement")
    
    # Charger .env
    from dotenv import load_dotenv
    load_dotenv()
    
    required = {
        'SUPABASE_URL': 'https://',
        'SUPABASE_SERVICE_KEY': 'eyJ',
        'POSTGRES_CONNECTION_STRING': 'postgresql://',
        'REDIS_URL': 'redis',
        'OPENROUTER_API_KEY': 'sk-or-v1-'
    }
    
    all_ok = True
    for var, prefix in required.items():
        value = os.getenv(var, '')
        if value and value.startswith(prefix):
            masked = value[:15] + '...' if len(value) > 15 else '***'
            print(f"‚úÖ {var}: {masked}")
        else:
            print(f"‚ùå {var}: MANQUANT ou INVALIDE")
            all_ok = False
    
    return all_ok


def check_dependencies():
    """V√©rifie les d√©pendances Python"""
    print_section("V√©rification D√©pendances Python")
    
    deps = [
        'asyncpg',
        'redis',
        'openai',
        'supabase',
        'pydantic',
        'python-dotenv',
        'aiohttp'
    ]
    
    all_ok = True
    for dep in deps:
        try:
            # Essayer d'importer
            if dep == 'python-dotenv':
                __import__('dotenv')
            else:
                __import__(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep} - NON INSTALL√â")
            all_ok = False
    
    if not all_ok:
        print("\nüí° Installer avec: pip install -r requirements.txt")
    
    return all_ok


def check_git():
    """V√©rifie le statut Git"""
    print_section("V√©rification Git")
    
    try:
        # V√©rifier repo git
        result = subprocess.run(
            ['git', 'rev-parse', '--git-dir'],
            capture_output=True,
            text=True,
            check=False
        )
        
        if result.returncode != 0:
            print("‚ùå Pas de repo Git initialis√©")
            return False
        
        print("‚úÖ Repo Git initialis√©")
        
        # V√©rifier remote origin
        result = subprocess.run(
            ['git', 'remote', 'get-url', 'origin'],
            capture_output=True,
            text=True,
            check=False
        )
        
        if result.returncode == 0:
            remote = result.stdout.strip()
            print(f"‚úÖ Remote origin: {remote}")
        else:
            print("‚ö†Ô∏è  Pas de remote origin configur√©")
        
        # V√©rifier fichiers non commit√©s
        result = subprocess.run(
            ['git', 'status', '--porcelain'],
            capture_output=True,
            text=True,
            check=False
        )
        
        uncommitted = result.stdout.strip()
        if uncommitted:
            lines = uncommitted.split('\n')
            print(f"‚ö†Ô∏è  {len(lines)} fichier(s) non commit√©(s):")
            for line in lines[:5]:
                print(f"     {line}")
            if len(lines) > 5:
                print(f"     ... et {len(lines) - 5} autre(s)")
            return False
        else:
            print("‚úÖ Tous les fichiers commit√©s")
            return True
            
    except FileNotFoundError:
        print("‚ùå Git n'est pas install√©")
        return False


def test_config_import():
    """Test d'import de la configuration"""
    print_section("Test Import Configuration")
    
    try:
        from app.config import settings
        print(f"‚úÖ Config import√©e")
        print(f"   Environment: {settings.environment}")
        print(f"   Model: {settings.openrouter_model}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur import config: {e}")
        return False


def main():
    """Ex√©cute toutes les v√©rifications"""
    print_header("üöÄ V√âRIFICATION PR√â-D√âPLOIEMENT - RandoMatch Bot Service")
    
    results = {
        'Python Version': check_python_version(),
        'Fichiers Critiques': check_files(),
        'Variables Env': check_env_vars(),
        'D√©pendances': check_dependencies(),
        'Configuration': test_config_import(),
        'Git Status': check_git(),
    }
    
    # R√©sum√©
    print_header("üìä R√âSUM√â")
    
    all_passed = True
    for check, passed in results.items():
        emoji = "‚úÖ" if passed else "‚ùå"
        print(f"{emoji} {check}")
        if not passed:
            all_passed = False
    
    print("\n" + "=" * 70)
    
    if all_passed:
        print("\nüéâ TOUT EST PR√äT POUR LE D√âPLOIEMENT !\n")
        print("Prochaines √©tapes:")
        print("  1. git add .")
        print("  2. git commit -m 'feat: Phase 1-2 complete - Intelligence Bot'")
        print("  3. git push origin main")
        print("  4. D√©ployer sur Railway\n")
        return 0
    else:
        print("\n‚ö†Ô∏è  CORRECTIONS N√âCESSAIRES AVANT D√âPLOIEMENT\n")
        print("R√©soudre les probl√®mes marqu√©s ‚ùå ci-dessus.\n")
        return 1


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  V√©rification annul√©e")
        sys.exit(130)
    except Exception as e:
        print(f"\n\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
